COMPOSE_IGNORE_ORPHANS=true

# COMPOSE_FILE=docker-compose.mysql.yml:docker-compose.nginx.yml
# dev | prod | test

__ENV__=prod
NETWORK_NAME=web
TZ=Asia/Shanghai

DATA_DIR=./__docker-data__
SITE_DIR=/var/www

# ------------ NGINX ------------
NGINX_IMAGE=nginx:1.21.3-alpine
NGINX_CONTAINER_NAME=nginx

# ------------ MYSQL ------------
# After init DB, You can set User Permissions and Create Table, e.g.
# `GRANT ALL PRIVILEGES ON *.* TO 'www-root'@'%'; FLUSH PRIVILEGES;`
MYSQL_IMAGE=mysql:5.7.35
MYSQL_CONTAINER_NAME=mysql
MYSQL_PORT=3306
MYSQL_USER=www
MYSQL_PASSWORD=mysql_www_VFboDsgJQdd&RZjmrGkXdH4ZYxxVAahE
MYSQL_ROOT_PASSWORD=mysql_root_kXdH4ZYxxVAahEVFboDsgJQdd&RZjmrG
MYSQL_DATABASE=demo

# ------------ ADMINER ------------
# server input box please input `service_name`, NOT `container_name` http://localhost:3307?server=mysql&username=root
ADMINER_IMAGE=adminer:4.8.1
ADMINER_CONTAINER_NAME=adminer
ADMINER_PORT=3307

# ------------ ACME ------------
# aliyun
ACME_DNS_ALI_KEY=
ACME_DNS_ALI_SECRET=
# dnspod
ACME_DNS_DP_ID=
ACME_DNS_DP_KEY=

# ------------ BACKUP ------------
# use `,` splite multi-tables e.g. `mysql,sys`
MYSQL_BACKUP_TABLES=prod_api,mysql
MYSQL_BACKUP_KEEP_DAYS=14

